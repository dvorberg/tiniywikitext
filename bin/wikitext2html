#!/Users/diedrich/t4wiki/virtualenv.nosync.noindex/bin/python

import sys, os, time, argparse, pathlib, subprocess

from tinywikitext import to_html
from tinywikitext.macro import macro_library
from tinymarkup.context import Context
from tinymarkup.exceptions import MarkupError

def invoke_editor(infilepath, lineno):
    editor = os.getenv("EDITOR", None)
    if editor is None:
        editor = "emacs"

    lineinfo = ""
    bg = ""
    if editor == "emacsclient":
        if lineno:
            lineinfo = f"+{lineno}"
        bg = "&"

    cmd = f'{editor} {lineinfo} "{infilepath.absolute()}" {bg}'
    print(cmd, file=sys.stderr)
    subprocess.run(cmd, shell=True)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--outfile", "-o",
                        nargs='?', type=argparse.FileType('w'),
                        default=sys.stdout)
    parser.add_argument("infilepaths", nargs="+", type=pathlib.Path)
    parser.add_argument("--editor", "-e", action="store_true", default=False,
                        help="Invoke $EDITOR on error. If the editor is called "
                        "“emacsclient” also supply +LINE information and "
                        "background it.")
    args = parser.parse_args()

    print('<!DOCTYPE html>',
          '<html>',
          '<head>',
          '<title></title>',
          '<meta charset="utf-8">',
          '</head>',
          '<body>',
          sep="\n", file=args.outfile)

    def process(infilepath):
        with infilepath.open() as fp:
            wikitext = fp.read()

        print(infilepath.name, end=" ", file=sys.stderr)

        parse_start = time.time()
        try:
            html = to_html(args.outfile, wikitext, Context(macro_library))
        except MarkupError as exc:
            print("\n", file=sys.stderr)

            if args.editor:
                try:
                    lineno = exc.location.lineno
                except AttributeError:
                    lineno = None

                invoke_editor(infilepath, lineno)

            raise

        parse_end = time.time()

        print("Conversion time: %.4f sec" % (parse_end-parse_start,),
              file=sys.stderr)

    for infilepath in args.infilepaths:
        process(infilepath)

    print('</body>',
          '</html>',
          sep="\n", file=args.outfile)

    args.outfile.close()

main()
